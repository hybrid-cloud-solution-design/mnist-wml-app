---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: mnist-wml-app
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [pull_request, push]
    pipelinesascode.tekton.dev/on-event: "[push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "git-clone"

    # Use maven task from hub
    #
    # pipelinesascode.tekton.dev/task-1: "maven"

    # You can add more tasks by increasing the suffix number, you can specify them as array to have multiple of them.
    # browse the tasks you want to include from hub on https://hub.tekton.dev/
    #
    pipelinesascode.tekton.dev/task-1: "[buildah, openshift-client]"

    # How many runs we want to keep.
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    # The variable with brackets are special to Pipelines as Code
    # They will automatically be expanded with the events from Github.
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: repo_name
      value: "{{ repo_name }}"      
    - name: target_namespace
      value: "{{ target_namespace }}"            
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
      - name: basic-auth
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      # Customize this task if you like, or just do a taskRef
      # to one of the hub task.
      - name: build
        displayName: Task with no effect
        runAfter:
          - fetch-repository
        taskRef:
          kind: ClusterTask
          name: buildah          
        params:
          - name: IMAGE
            value: "image-registry.openshift-image-registry.svc:5000/$(params.target_namespace)/$(params.repo_name):latest"
          - name: TLSVERIFY
            value: 'false'
          - name: CONTEXT
            value: .       
        workspaces:
          - name: source
            workspace: source
      - name: deploy
        params:
          - name: SCRIPT
            value: |-
              cd manifests
              ls -la
              oc apply -f .
              APP_URL=$(oc get route mnist-wml-app -o jsonpath="{.spec.host}")
              echo -n "$APP_URL" 
        runAfter:
          - build
        taskRef:
          kind: ClusterTask
          name: openshift-client
        workspaces:
          - name: manifest-dir
            workspace: workspace
  workspaces:
  - name: source
    volumeClaimTemplate:
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
  # This workspace will inject secret to help the git-clone task to be able to
  # checkout the private repositories
  - name: basic-auth
    secret:
      secretName: "{{ git_auth_secret }}"
